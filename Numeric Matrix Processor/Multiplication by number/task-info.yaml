type: edu
custom_name: stage2
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            var scanner = new Scanner(System.in);
            int x, y;
            y = scanner.nextInt();
            x = scanner.nextInt();
            Matrix a = new Matrix(x, y);
            a.fill(scanner);

            y = scanner.nextInt();
            x = scanner.nextInt();
            Matrix b = new Matrix(x, y);
            b.fill(scanner);

            Matrix c = a.add(b);
            if (c != Matrix.ERROR)
                System.out.println(c);
            else
                System.out.println("ERROR");
        }
    }
  learner_created: false
- name: src/processor/Matrix.java
  visible: true
  text: |
    package processor;

    import java.util.Scanner;

    public class Matrix {
        public static final Matrix ERROR = new Matrix(0, 0);
        private final int width;
        private final int height;
        private final int[][] matrix;

        public Matrix(int width, int height) {
            this.width = width;
            this.height = height;
            matrix = new int[height][width];
        }

        public boolean fill(Scanner input) {
            try {
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        matrix[y][x] = input.nextInt();
                    }
                }
                return true;
            } catch (Exception e) {
                return false;
            }
        }

        public boolean dimensionMatches(Matrix other) {
            return width == other.width && height == other.height;
        }

        public Matrix add(Matrix other) {
            if (dimensionMatches(other)) {
                Matrix output = new Matrix(width, height);
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        output.matrix[y][x] = matrix[y][x] + other.matrix[y][x];
                    }
                }
                return output;
            }
            return ERROR;
        }

        @Override
        public String toString() {
            var out = new StringBuilder();
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    int val = matrix[y][x];
                    out.append(val).append(" ");
                }
                out.append("\n");
            }
            return out.toString();
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.stream.Collectors;

    public class NumericMatrixProcessorTest extends StageTest {

        @Override
        public List<TestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "3 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "7 8 9\n" +
                        "3",
                    "3 6 9\n" +
                        "12 15 18\n" +
                        "21 24 27"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "2 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "0",
                    "0 0 0\n" +
                        "0 0 0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "5 5\n" +
                        "1 4 6 7 8\n" +
                        "1 9 5 2 2\n" +
                        "1 4 3 5 7\n" +
                        "1 4 6 4 1\n" +
                        "1 4 5 7 1\n" +
                        "5",
                    "5 20 30 35 40\n" +
                        "5 45 25 10 10\n" +
                        "5 20 15 25 35\n" +
                        "5 20 30 20 5\n" +
                        "5 20 25 35 5"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "1\n" +
                        "1",
                    "1"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "0\n" +
                        "1",
                    "0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "3 2\n" +
                        "1 2\n" +
                        "8 1\n" +
                        "9 1\n" +
                        "10",
                    "10 20\n" +
                        "80 10\n" +
                        "90 10"
                ).setCheckFunc(this::checkSolved)
            );
        }

        private CheckResult checkSolved(String reply, String clue) {

            clue = clue.strip();
            reply = reply.strip();

            if (reply.equals(clue)) {
                return CheckResult.correct();
            }

            if (clue.equals("ERROR")) {
                return CheckResult.wrong("");
            }

            List<String> user = reply.lines().collect(Collectors.toList());
            List<String> answ = clue.lines().collect(Collectors.toList());

            if (user.size() != answ.size()) {
                return CheckResult.wrong("");
            }

            for (int i = 0; i < user.size(); i++) {
                String userLine = user.get(i).strip();
                String answLine = answ.get(i).strip();
                if (!userLine.equals(answLine)) {
                    return CheckResult.wrong("");
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/60/stages/324/implement#comment
status: Solved
record: 1
